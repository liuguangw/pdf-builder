import {bookList} from "./book_list.js";
import {writeFile, stat, mkdir} from 'fs/promises';
import formatMenuList from "../lib/format_menu_list.js";

async function saveBookMenu(projectName, menuList) {
    let items = await bookList();
    let bookInfo = null;
    items.forEach(itemInfo => {
        if (itemInfo.projectName === projectName) {
            bookInfo = itemInfo
        }
    });
    if (bookInfo === null) {
        throw new Error("project " + projectName + " not found")
    }
    let menuHtml = formatMenuHtml(projectName, bookInfo.title, bookInfo.contextURL, menuList)
    //如果dist目录不存在,自动创建
    let saveDir = "./server/projects/" + projectName + "/dist"
    try {
        await stat(saveDir)
    } catch (e) {
        await mkdir(saveDir)
    }
    let savePath = saveDir + "/__entry.html"
    await writeFile(savePath, menuHtml)
}

function formatMenuHtml(projectName, bookTitle, contextURL, menuList) {
    let allGroupHtml = "\t<div class=\"book-main-title\"><h1>" + bookTitle + "</h1></div>\n" +
        "\t<div class=\"menu-list\">\n";
    allGroupHtml += formatMenuList(contextURL, menuList, 1)
    allGroupHtml += "\n\t</div>\n"
    return "<!DOCTYPE html>\n" +
        "<html lang=\"zh-CN\">\n" +
        "  <head>\n" +
        "    <meta charset=\"utf-8\" />\n" +
        "    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n" +
        "    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no\" />\n" +
        "    <title>" + bookTitle + "</title>\n" +
        "    <link rel=\"stylesheet\" href=\"../../../css/menu.css\" />\n" +
        "  </head>\n" +
        "  <body>\n" + allGroupHtml +
        "   <div class=\"menu-tip\"><span>Generated by</span><a href=\"https://github.com/liuguangw/pdf-builder\">pdf-builder</a></div>\n" +
        " </body>\n" +
        "</html>";
}

/**
 * 保存menu信息
 *
 * @param {IncomingMessage} req
 * @param resp
 */
export default async function (req, resp) {
    let items = await bookList();
    let bookName = req.params.bookName;
    let bookInfo = null;
    items.forEach(itemInfo => {
        if (itemInfo.projectName === bookName) {
            bookInfo = itemInfo
        }
    });
    if (bookInfo === null) {
        resp.json({
            code: 4000,
            data: null,
            message: "book " + bookName + " not found"
        });
        return;
    }
    try {
        await saveBookMenu(bookName, req.body);
    } catch (e) {
        resp.json({
            code: 4000,
            data: null,
            message: e.message
        });
        return;
    }
    resp.json({
        code: 0,
        data: null,
        message: ""
    });
}
